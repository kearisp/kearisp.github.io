{"version":3,"file":"static/js/586.71ac233d.chunk.js","mappings":"qJAKA,MAoBMA,EAAWC,UACb,GAAK,kBAAmBC,UAIxB,IACI,MAAMC,QAAqBD,UAAUE,cAAcJ,SAAS,qBAE5DK,QAAQC,IAAI,wCAAyCH,EAAaI,MACtE,CACA,MAAMC,GACFH,QAAQI,MAAM,sCAAuCD,EACzD,GAGEE,EAAaT,UACf,KAAK,kBAAmBC,WACpB,OAGJ,MAAMS,QAAeT,UAAUE,cAAcQ,gBAAgB,qBAE1DD,SACOA,EAAOD,YACjB,EAsEJ,EAnE0BG,KACtB,MAAMC,GAAiBC,EAAAA,EAAAA,cAAYd,UAAa,IAADe,EAC3C,MAAMC,QAAYC,MAAM,2BAElBC,QAAaF,EAAIE,OACjBC,EAAMC,IAAIC,gBAAgBH,GAE1BI,OAtDGtB,UACN,IAAIuB,SAAQ,CAACC,EAASC,KACzB,MAAMH,EAAQ,IAAII,MAElBJ,EAAMK,OAAS,KACXH,EAAQF,EAAM,EAGlBA,EAAMM,QAAU,KACZH,EAAO,KAAK,EAGhBH,EAAMO,QAAWtB,IACbkB,EAAOlB,EAAI,EAGfe,EAAMQ,IAAMA,CAAG,IAsCKC,CAASZ,GAE7Bf,QAAQC,IAAIiB,EAAMU,MAAOV,EAAMW,QAE/B,MAAMC,EAAgB,MAEtB,IAAIC,EAAQ,GAERb,EAAMU,MAAQE,GAAiBZ,EAAMW,OAASC,KAC9CC,EAAQC,KAAKC,IAAIH,EAAgBZ,EAAMU,MAAOE,EAAgBZ,EAAMW,SAGxE,MAAMK,EAASC,SAASC,cAAc,UACtCF,EAAON,MAAQV,EAAMU,MAAQG,EAC7BG,EAAOL,OAASX,EAAMW,OAASE,EAE/B,MAAMM,EAAUH,EAAOI,WAAW,MAClCD,EAAQE,UAAUrB,EAAO,EAAG,GAE5B,MAAMsB,EAAYH,EAAQI,aAAa,EAAG,EAAGP,EAAON,MAAOM,EAAOL,QAEhC,QAAlClB,EAAAd,UAAUE,cAAc2C,kBAAU,IAAA/B,GAAlCA,EAAoCgC,YAAY,CAC5CC,KAAM,YACNC,EAAG,EACHL,aACF,GACH,IAEGM,GAASpC,EAAAA,EAAAA,cAAYd,gBACjBiB,MAAM,0BAA0B,GACvC,KAEoBH,EAAAA,EAAAA,cAAYd,gBACzBS,UACAV,GAAU,GACjB,IAUH,OARAoD,EAAAA,EAAAA,YAAU,KACN,iBACUtC,UAEAqC,GACT,EAJD,EAII,GACL,KAGCE,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACrB,MAAO,OAAQC,OAAQ,SAASqB,SAAA,EAKzCC,EAAAA,EAAAA,KAAA,UAAQC,QAASzD,EAASuD,SAAC,cAC3BC,EAAAA,EAAAA,KAAA,UAAQC,QAAS/C,EAAW6C,SAAC,gBAC7BC,EAAAA,EAAAA,KAAA,UAAQC,QAAS3C,EAAeyC,SAAC,eACjCC,EAAAA,EAAAA,KAAA,UAAQC,QAASN,EAAOI,SAAC,UACvB,C","sources":["views/pages/MapPage/index.tsx"],"sourcesContent":["import React, {useMemo, useCallback, useEffect} from \"react\";\nimport {MapContainer, TileLayer} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\n\nconst getImage = async (src: string): Promise<HTMLImageElement> => {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = () => {\n            resolve(image);\n        };\n\n        image.onabort = () => {\n            reject(null);\n        };\n\n        image.onerror = (err) => {\n            reject(err);\n        };\n\n        image.src = src;\n    });\n};\n\nconst register = async () => {\n    if(!(\"serviceWorker\" in navigator)) {\n        return;\n    }\n\n    try {\n        const registration = await navigator.serviceWorker.register(\"service-worker.js\");\n\n        console.log(\"Service Worker registered with scope:\", registration.scope);\n    }\n    catch(err) {\n        console.error(\"Service Worker registration failed:\", err);\n    }\n};\n\nconst unregister = async () => {\n    if(!(\"serviceWorker\" in navigator)) {\n        return;\n    }\n\n    const worker = await navigator.serviceWorker.getRegistration(\"service-worker.js\");\n\n    if(worker) {\n        await worker.unregister();\n    }\n};\n\nconst MapPage: React.FC = () => {\n    const handleSetLayer = useCallback(async () => {\n        const res = await fetch(\"/never-demand-world.svg\");\n\n        const blob = await res.blob();\n        const url = URL.createObjectURL(blob);\n\n        const image = await getImage(url);\n\n        console.log(image.width, image.height);\n\n        const maxCanvasSize = 32767; // Максимальний розмір канвасу\n\n        let scale = 1; // Масштаб\n\n        if (image.width > maxCanvasSize || image.height > maxCanvasSize) {\n            scale = Math.min(maxCanvasSize / image.width, maxCanvasSize / image.height);\n        }\n\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = image.width * scale;\n        canvas.height = image.height * scale;\n\n        const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        context.drawImage(image, 0, 0);\n\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        navigator.serviceWorker.controller?.postMessage({\n            type: \"set-layer\",\n            v: 3,\n            imageData\n        });\n    }, []);\n\n    const handle = useCallback(async () => {\n        await fetch(\"/assets/map?x=1&y=1&z=1\");\n    }, []);\n\n    const handleRegister = useCallback(async () => {\n        await unregister();\n        await register();\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            await handleSetLayer();\n\n            await handle();\n        })();\n    }, []);\n\n    return (\n        <div style={{width: \"100%\", height: \"300px\"}}>\n            {/*<MapContainer center={{lng: 0, lat: 0}} zoom={30} style={{width: \"100%\", height: \"100%\"}}>*/}\n            {/*    <TileLayer url=\"/assets/map?x={x}&y={y}&z={z}\" />*/}\n            {/*</MapContainer>*/}\n\n            <button onClick={register}>Register</button>\n            <button onClick={unregister}>Unregister</button>\n            <button onClick={handleSetLayer}>Set layer</button>\n            <button onClick={handle}>123</button>\n        </div>\n    );\n};\n\n\nexport default MapPage;\n"],"names":["register","async","navigator","registration","serviceWorker","console","log","scope","err","error","unregister","worker","getRegistration","MapPage","handleSetLayer","useCallback","_navigator$serviceWor","res","fetch","blob","url","URL","createObjectURL","image","Promise","resolve","reject","Image","onload","onabort","onerror","src","getImage","width","height","maxCanvasSize","scale","Math","min","canvas","document","createElement","context","getContext","drawImage","imageData","getImageData","controller","postMessage","type","v","handle","useEffect","_jsxs","style","children","_jsx","onClick"],"sourceRoot":""}