{"version":3,"file":"static/js/752.c4ce651b.chunk.js","mappings":"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","sources":["pages/PathBuilderPage/blocks/InputSlider/index.tsx","pages/PathBuilderPage/index.tsx"],"sourcesContent":["import React, {useCallback} from \"react\";\nimport {Grid, Slider, SliderProps} from \"@mui/material\";\n\n\ntype Props = {\n    title?: SliderProps[\"title\"];\n    marks?: SliderProps[\"marks\"];\n    min?: SliderProps[\"min\"];\n    max?: SliderProps[\"max\"];\n    step?: number;\n    defaultValue?: SliderProps[\"defaultValue\"];\n    value?: number;\n    onChange?: (value: number) => void;\n};\n\nconst InputSlider: React.FC<Props> = (props) => {\n    const {\n        value,\n        onChange,\n        ...rest\n    } = props;\n\n    const handleChange = useCallback((e: Event, value: number|number[]) => {\n        if(!onChange) {\n            return;\n        }\n\n        onChange(value as number);\n    }, [onChange]);\n\n    return (\n        <Grid container spacing={2} alignItems=\"center\">\n            <Grid item width={50}>\n                {value}\n            </Grid>\n\n            <Grid item xs>\n                <Slider\n                  {...rest}\n                  value={value}\n                  onChange={handleChange} />\n            </Grid>\n        </Grid>\n    );\n};\n\n\nexport {InputSlider};\n","import React, {useState, useRef, useCallback, useEffect} from \"react\";\nimport {Container, Grid, Slider, Switch} from \"@mui/material\";\nimport {Point} from \"motor-js\";\n\nimport {PathBuilder} from \"src/blocks\";\nimport {InputSlider} from \"./blocks\";\n\n\nconst PathBuilderPage: React.FC = () => {\n    const [isRunning, setRunning] = useState(true);\n    const [fov, setFov] = useState(300);\n    const [position, setPosition] = useState<Point>({x: 0, y: 0, z: 0});\n    const [direction, setDirection] = useState<Point>({x: 0, y: 0, z: 1});\n    const [azimuth, setAzimuth] = useState(0);\n    const [polar, setPolar] = useState(0);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const handleChangeFov = useCallback((newValue: number) => {\n        setFov(newValue as number);\n    }, []);\n\n    const getPointProject = useCallback((point: Point, direction: Point) => {\n        if(point.z === direction.z) {\n            return {\n                x: 0,\n                y: 0\n            };\n        }\n\n        const scale = direction.z / (direction.z + point.z);\n\n        return {\n            x: scale * (point.x - direction.x),\n            y: scale * (point.y - direction.y)\n        };\n    }, [position, direction]);\n\n    const handleCalculateDirection = useCallback((azimuth: number, polar: number) => {\n        const polarRadians = azimuth * (Math.PI / 180),\n            azimuthRadians = polar * (Math.PI / 180);\n\n        const direction = {\n            x: Math.sin(polarRadians) * Math.cos(azimuthRadians),\n            y: Math.cos(polarRadians),\n            z: Math.sin(polarRadians) * Math.sin(azimuthRadians)\n        };\n\n        // const distance = Math.sqrt(direction.x ** 2 + direction.y ** 2 + direction.z ** 2);\n\n        setDirection(direction);\n    }, []);\n\n    const handleChangeAzimuth = useCallback((azimuth: number) => {\n        handleCalculateDirection(azimuth, polar);\n\n        setAzimuth(azimuth);\n    }, [polar]);\n\n    const handleChangePolar = useCallback((polar: number) => {\n        handleCalculateDirection(azimuth, polar);\n\n        setPolar(polar);\n    }, [azimuth]);\n\n    const rotatePoint = useCallback((point: Point, direction: Point) => {\n        let rotationAngle = 45 * (Math.PI / 180);\n\n        let cosAngle = Math.cos(rotationAngle);\n        let sinAngle = Math.sin(rotationAngle);\n\n        let rotationMatrix = [\n            [\n                cosAngle + direction.x ** 2 * (1 - cosAngle),\n                direction.x * direction.y * (1 - cosAngle) - direction.z * sinAngle,\n                direction.x * direction.z * (1 - cosAngle) + direction.y * sinAngle\n            ],\n            [\n                direction.y * direction.x * (1 - cosAngle) + direction.z * sinAngle,\n                cosAngle + direction.y ** 2 * (1 - cosAngle),\n                direction.y * direction.z * (1 - cosAngle) - direction.x * sinAngle\n            ],\n            [\n                direction.z * direction.x * (1 - cosAngle) - direction.y * sinAngle,\n                direction.z * direction.y * (1 - cosAngle) + direction.x * sinAngle,\n                cosAngle + direction.z ** 2 * (1 - cosAngle)\n            ]\n        ];\n\n        let rotatedPoint = {\n            x: rotationMatrix[0][0] * point.x + rotationMatrix[0][1] * point.y + rotationMatrix[0][2] * point.z,\n            y: rotationMatrix[1][0] * point.x + rotationMatrix[1][1] * point.y + rotationMatrix[1][2] * point.z,\n            z: rotationMatrix[2][0] * point.x + rotationMatrix[2][1] * point.y + rotationMatrix[2][2] * point.z\n        };\n\n        // console.log(\"rotationMatrix: \", rotationMatrix, \"rotatedPoint: \", rotatedPoint);\n\n        return rotatedPoint;\n    }, [direction]);\n\n    useEffect(() => {\n        const handleKeydown = (e: KeyboardEvent) => {\n            switch(e.key) {\n                case \"ArrowUp\":\n                    setPosition((position) => {\n                        return {...position, y: position.y + 1};\n                    });\n                    break;\n\n                case \"ArrowDown\":\n                    setPosition((position) => {\n                        return {...position, y: position.y - 1};\n                    });\n                    break;\n\n                case \"ArrowLeft\":\n                    setPosition((position) => {\n                        return {...position, x: position.x + 1};\n                    });\n                    break;\n\n                case \"ArrowRight\":\n                    setPosition((position) => {\n                        return {...position, x: position.x - 1};\n                    });\n                    break;\n            }\n        };\n\n        document.addEventListener(\"keydown\", handleKeydown);\n\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeydown);\n        };\n    }, []);\n\n    useEffect(() => {\n        if(!canvasRef.current) {\n            return;\n        }\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext(\"2d\");\n\n        if(!context) {\n            return;\n        }\n\n        const center = {x: 0, y: 0, z: 0};\n\n        const camera = {\n            x: 200,\n            y: -200,\n            z: 500\n        };\n\n        const drawLine = (pointStart: Point, pointEnd: Point, color = \"#FFFFFF\") => {\n            const start = getPointProject(pointStart, camera),\n                end = getPointProject(pointEnd, camera);\n\n            context.strokeStyle = color;\n            context.lineWidth = 0.5;\n            context.beginPath();\n            context.moveTo(canvas.width / 2 + start.x + camera.x, canvas.height / 2 - start.y - camera.y);\n            context.lineTo(canvas.width / 2 + end.x + camera.x, canvas.height / 2 - end.y - camera.y);\n            context.stroke();\n            context.closePath();\n        };\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        drawLine({x: -100, y: 0, z: 0}, {x: 100, y: 0, z: 0});\n        drawLine({x: 0, y: -100, z: 0}, {x: 0, y: 100, z: 0});\n        drawLine({x: 0, y: 0, z: -100}, {x: 0, y: 0, z: 100});\n\n        drawLine(center, position, \"#FFFF00\");\n        drawLine(center, direction, \"#FF0000\");\n\n        const rotatedPosition = rotatePoint(position, direction);\n\n        drawLine(center, rotatedPosition, \"#FF00FF\");\n    }, [position, direction]);\n\n    useEffect(() => {\n        if(!canvasRef.current) {\n            return;\n        }\n\n        const canvas = canvasRef.current;\n        const ctx = canvasRef.current.getContext(\"2d\");\n\n        if(!ctx) {\n            return;\n        }\n\n        // 3D координати об'єкта\n        const vertices = [\n            { x: -50, y: -50, z: -50 },\n            { x:  50, y: -50, z: -50 },\n            { x:  50, y:  50, z: -50 },\n            { x: -50, y:  50, z: -50 },\n            { x: -50, y: -50, z:  50 },\n            { x:  50, y: -50, z:  50 },\n            { x:  50, y:  50, z:  50 },\n            { x: -50, y:  50, z:  50 }\n        ];\n\n        // З'єднати вершини, щоб сформувати грані\n        const edges = [\n            [0, 1], [1, 2], [2, 3], [3, 0],\n            [4, 5], [5, 6], [6, 7], [7, 4],\n            [0, 4], [1, 5], [2, 6], [3, 7]\n        ];\n\n        // Параметри камери\n        const camera = {...direction, z: direction.z + 300};\n\n        // Перспективна проєкція\n        function projectPerspective(vertex) {\n            const scale = camera.z / (camera.z + vertex.z);\n\n            return {\n                x: canvas.width / 2 + scale * (vertex.x - camera.x),\n                y: canvas.height / 2 - scale * (vertex.y - camera.y)\n            };\n        }\n\n        // Малюємо об'єкт на canvas\n        function draw() {\n            if(!ctx) {\n                return;\n            }\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            for(const edge of edges) {\n                const start = projectPerspective(vertices[edge[0]]);\n                const end = projectPerspective(vertices[edge[1]]);\n\n                ctx.beginPath();\n                ctx.moveTo(start.x, start.y);\n                ctx.lineTo(end.x, end.y);\n                ctx.stroke();\n            }\n        }\n\n        // draw();\n    }, [direction]);\n\n    return (\n        <Container>\n            <Switch\n              checked={isRunning}\n              onChange={(e, checked) => {\n                setRunning(checked);\n              }} />\n\n            <InputSlider\n              title=\"FOV\"\n              min={0}\n              max={500}\n              value={fov}\n              onChange={handleChangeFov} />\n\n            <InputSlider\n              min={-360}\n              max={360}\n              title=\"Azimuth\"\n              value={azimuth}\n              onChange={handleChangeAzimuth} />\n\n            <InputSlider\n              min={-360}\n              max={360}\n              title=\"Polar\"\n              value={polar}\n              onChange={handleChangePolar} />\n\n            <Grid container spacing={10}>\n                <Grid container item xs={6} spacing={2}>\n                    <Grid item xs={12}>\n                        <InputSlider\n                          min={-100}\n                          max={100}\n                          defaultValue={0}\n                          title=\"Position X\"\n                          marks={[\n                            {label: \"-100\", value: -100},\n                            {label: \"0\", value: 0},\n                            {label: \"100\", value: 100}\n                          ]}\n                          value={position.x}\n                          onChange={(value) => {\n                            setPosition({\n                                ...position,\n                                x: value\n                            });\n                          }} />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <InputSlider\n                          min={-100}\n                          max={100}\n                          marks={[\n                            {label: \"-100\", value: -100},\n                            {label: \"0\", value: 0},\n                            {label: \"100\", value: 100}\n                          ]}\n                          title=\"Position Y\"\n                          value={position.y}\n                          onChange={(value) => {\n                            setPosition({\n                               ...position,\n                               y: value\n                            });\n                          }} />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <InputSlider\n                          min={-100}\n                          max={100}\n                          marks={[\n                            {label: \"-100\", value: -100},\n                            {label: \"0\", value: 0},\n                            {label: \"100\", value: 100}\n                          ]}\n                          title=\"Position Z\"\n                          value={position.z}\n                          onChange={(value) => {\n                            setPosition({\n                                ...position,\n                                z: value\n                            });\n                          }} />\n                    </Grid>\n                </Grid>\n\n                <Grid container item xs={6} spacing={2}>\n                    <Grid item xs={12}>\n                        <InputSlider\n                          min={-1}\n                          max={1}\n                          step={0.01}\n                          marks={[\n                            {label: \"-1\", value: -1},\n                            {label: \"0\", value: 0},\n                            {label: \"1\", value: 1}\n                          ]}\n                          title=\"Direction X\"\n                          value={direction.x}\n                          onChange={(value) => {\n                            setDirection({\n                                ...direction,\n                                x: value as number\n                            });\n                          }} />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <InputSlider\n                          min={-1}\n                          max={1}\n                          step={0.01}\n                          marks={[\n                            {label: \"-1\", value: -1},\n                            {label: \"0\", value: 0},\n                            {label: \"1\", value: 1}\n                          ]}\n                          title=\"Direction Y\"\n                          value={direction.y}\n                          onChange={(value) => {\n                            setDirection({\n                               ...direction,\n                               y: value as number\n                            });\n                          }} />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <InputSlider\n                          min={-1}\n                          max={1}\n                          step={0.01}\n                          marks={[\n                            {label: \"-1\", value: -1},\n                            {label: \"0\", value: 0},\n                            {label: \"1\", value: 1}\n                          ]}\n                          title=\"Direction Z\"\n                          value={direction.z}\n                          onChange={(value) => {\n                            setDirection({\n                                ...direction,\n                                z: value as number\n                            });\n                          }} />\n                    </Grid>\n                </Grid>\n            </Grid>\n\n            <Grid container spacing={1}>\n                <Grid item xs={6}>\n                    <canvas\n                      ref={canvasRef}\n                      width={400}\n                      height={400} />\n                </Grid>\n\n                <Grid item xs={3} display=\"flex\" justifyContent=\"flex-end\">\n                    <PathBuilder\n                      context=\"svg\"\n                      running={isRunning}\n                      position={position}\n                      direction={direction}\n                      fov={fov} />\n                </Grid>\n\n                <Grid item xs={3}>\n                    <PathBuilder\n                      context=\"canvas\"\n                      running={isRunning}\n                      position={position}\n                      direction={direction}\n                      fov={fov} />\n                </Grid>\n\n                <Grid item xs={12}>\n                    <pre>{JSON.stringify({fov, position, direction}, null, 4)}</pre>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n};\n\n\nexport default PathBuilderPage;\n"],"names":["InputSlider","props","value","onChange","rest","handleChange","useCallback","e","_jsxs","Grid","container","spacing","alignItems","children","_jsx","item","width","xs","Slider","PathBuilderPage","isRunning","setRunning","useState","fov","setFov","position","setPosition","x","y","z","direction","setDirection","azimuth","setAzimuth","polar","setPolar","canvasRef","useRef","handleChangeFov","newValue","getPointProject","point","scale","handleCalculateDirection","polarRadians","Math","PI","azimuthRadians","sin","cos","handleChangeAzimuth","handleChangePolar","rotatePoint","rotationAngle","cosAngle","sinAngle","rotationMatrix","useEffect","handleKeydown","key","document","addEventListener","removeEventListener","current","canvas","context","getContext","center","camera","drawLine","pointStart","pointEnd","color","arguments","length","undefined","start","end","strokeStyle","lineWidth","beginPath","moveTo","height","lineTo","stroke","closePath","clearRect","ctx","Container","Switch","checked","title","min","max","defaultValue","marks","label","step","ref","display","justifyContent","PathBuilder","running","JSON","stringify"],"sourceRoot":""}